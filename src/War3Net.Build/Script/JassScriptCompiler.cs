// ------------------------------------------------------------------------------
// <copyright file="JassScriptCompiler.cs" company="Drake53">
// Licensed under the MIT license.
// See the LICENSE file in the project root for more information.
// </copyright>
// ------------------------------------------------------------------------------

#nullable enable

using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;

using War3Net.Build.Providers;
using War3Net.CodeAnalysis.Jass;
using War3Net.CodeAnalysis.Jass.Renderer;
using War3Net.CodeAnalysis.Jass.Syntax;

namespace War3Net.Build.Script
{
    internal sealed class JassScriptCompiler : ScriptCompiler
    {
        private readonly JassRendererOptions _rendererOptions;

        public JassScriptCompiler(ScriptCompilerOptions options, JassRendererOptions rendererOptions)
            : base(options)
        {
            /*if (options.SourceDirectory != null)
            {
                if (options.JasshelperCliPath is null)
                {
                    throw new System.Exception();
                }

                // todo: retrieve these vals from somewhere
                var x86 = true;
                var ptr = false;
                // var reforged = ?;

                // _jasshelperPath = Path.Combine(new FileInfo(WarcraftPathProvider.GetExePath(x86, ptr)).DirectoryName, "JassHelper", "jasshelper.exe");

                var jasshelperDocuments = Path.Combine(
                    System.Environment.GetFolderPath(System.Environment.SpecialFolder.MyDocuments),
                    ptr ? "Warcraft III Public Test" : "Warcraft III",
                    "Jasshelper");

                _commonPath = Path.Combine(jasshelperDocuments, "common.j");
                _blizzardPath = Path.Combine(jasshelperDocuments, "Blizzard.j");
            }*/

            _rendererOptions = rendererOptions;
        }

        public override void BuildAutogeneratedCode(out string globalsFilePath, out string mainFunctionFilePath, out string configFunctionFilePath)
        {
            var functionBuilderData = new FunctionBuilderData(Options.MapInfo, Options.MapDoodads, Options.MapUnits, Options.MapRegions, Options.MapSounds, Options.LobbyMusic, false);
            var functionBuilder = new JassFunctionBuilder(functionBuilderData);

            globalsFilePath = Path.Combine(Options.OutputDirectory, "globals.j");
            RenderToFile(globalsFilePath, functionBuilder.BuildGlobalDeclarations());

            mainFunctionFilePath = Path.Combine(Options.OutputDirectory, "main.j");
            RenderToFile(mainFunctionFilePath, functionBuilder.BuildMainFunction());

            configFunctionFilePath = Path.Combine(Options.OutputDirectory, "config.j");
            RenderToFile(configFunctionFilePath, functionBuilder.BuildConfigFunction());
        }

        public override CompileResult Compile(out string scriptFilePath, params string[] additionalSourceFiles)
        {
            var outputScript = "war3map.j";
            scriptFilePath = Path.Combine(Options.OutputDirectory, outputScript);

            var jasshelperPath = Options.JasshelperCliPath;
            if (string.IsNullOrEmpty(jasshelperPath) || !File.Exists(jasshelperPath))
            {
                return new CompileResult(false, new[] { Microsoft.CodeAnalysis.Diagnostic.Create(DiagnosticProvider.MissingPathJasshelper, null, jasshelperPath) });
            }

            var commonPath = Options.CommonJPath;
            if (string.IsNullOrEmpty(commonPath) || !File.Exists(commonPath))
            {
                return new CompileResult(false, new[] { Microsoft.CodeAnalysis.Diagnostic.Create(DiagnosticProvider.MissingPathCommonJ, null, commonPath) });
            }

            var blizzardPath = Options.BlizzardJPath;
            if (string.IsNullOrEmpty(blizzardPath) || !File.Exists(blizzardPath))
            {
                return new CompileResult(false, new[] { Microsoft.CodeAnalysis.Diagnostic.Create(DiagnosticProvider.MissingPathBlizzardJ, null, blizzardPath) });
            }

            var inputScript = Path.Combine(Options.OutputDirectory, "files.j");
            using (var inputScriptStream = FileProvider.OpenNewWrite(inputScript))
            {
                using (var streamWriter = new StreamWriter(inputScriptStream))
                {
                    foreach (var file in Directory.EnumerateFiles(Options.SourceDirectory, "*.j", SearchOption.AllDirectories))
                    {
                        streamWriter.WriteLine($"//! import \"{file}\"");
                    }

                    /*foreach (var reference in references)
                    {
                        foreach (var file in reference.EnumerateFiles("*.j", SearchOption.AllDirectories, null))
                        {
                            streamWriter.WriteLine($"//! import \"{file}\"");
                        }
                    }*/

                    foreach (var file in additionalSourceFiles)
                    {
                        streamWriter.WriteLine($"//! import \"{file}\"");
                    }
                }
            }

            var jasshelperOutputScript = Path.Combine(Options.OutputDirectory, Options.Obfuscate ? "war3map.original.j" : outputScript);
            var jasshelperOptions = Options.Debug ? "--debug" : Options.Optimize ? string.Empty : "--nooptimize";
            var jasshelper = Process.Start(Options.JasshelperCliPath, $"{jasshelperOptions} --scriptonly \"{commonPath}\" \"{blizzardPath}\" \"{inputScript}\" \"{jasshelperOutputScript}\"");
            jasshelper.WaitForExit();

            var success = jasshelper.ExitCode == 0;
            var diagnostics = new List<Microsoft.CodeAnalysis.Diagnostic>();
            if (success)
            {
                if (Options.Obfuscate)
                {
                    JassObfuscator.Obfuscate(jasshelperOutputScript, scriptFilePath, commonPath, blizzardPath);
                }
            }
            else
            {
                while (!jasshelper.StandardOutput.EndOfStream)
                {
                    // TODO: parse stdout
                    // diagnostics.Add(Diagnostic.Create())
                    jasshelper.StandardOutput.ReadLine();
                }
            }

            return new CompileResult(success, diagnostics);
        }

        public override void CompileSimple(out string scriptFilePath, params string[] additionalSourceFiles)
        {
            scriptFilePath = Path.Combine(Options.OutputDirectory, "war3map.j");
            using (var fileStream = FileProvider.OpenNewWrite(scriptFilePath))
            {
                using (var writer = new StreamWriter(fileStream, new UTF8Encoding(false, true), 1024, true))
                {
                    foreach (var additionalSourceFile in additionalSourceFiles)
                    {
                        writer.Write(File.ReadAllText(additionalSourceFile));
                        writer.WriteLine();
                    }
                }
            }
        }

        private void RenderToFile(string path, IEnumerable<GlobalDeclarationSyntax?> globals)
        {
            using (var fileStream = FileProvider.OpenNewWrite(path))
            {
                using (var writer = new StreamWriter(fileStream, new UTF8Encoding(false, true)))
                {
                    var renderer = new JassRenderer(writer);
                    renderer.Options = _rendererOptions;

                    var globalsArray = globals.Where(global => global != null).ToArray();
                    var globalsDeclarationList = globalsArray.Length == 0
                        ? new GlobalsDeclarationListSyntax(new EmptyNode(0))
                        : new GlobalsDeclarationListSyntax(globalsArray);

                    renderer.Render(JassSyntaxFactory.File(
                        new NewDeclarationSyntax(
                            new DeclarationSyntax(new GlobalsBlockSyntax(
                                new TokenNode(new SyntaxToken(SyntaxTokenType.GlobalsKeyword), 0),
                                new LineDelimiterSyntax(new EndOfLineSyntax(new TokenNode(new SyntaxToken(SyntaxTokenType.NewlineSymbol), 0))),
                                globalsDeclarationList,
                                new TokenNode(new SyntaxToken(SyntaxTokenType.EndglobalsKeyword), 0))),
                            new LineDelimiterSyntax(new EndOfLineSyntax(new TokenNode(new SyntaxToken(SyntaxTokenType.NewlineSymbol), 0))))));
                }
            }
        }

        private void RenderToFile(string path, IEnumerable<FunctionSyntax> functions)
        {
            using (var fileStream = FileProvider.OpenNewWrite(path))
            {
                using (var writer = new StreamWriter(fileStream, new UTF8Encoding(false, true)))
                {
                    var renderer = new JassRenderer(writer);
                    renderer.Options = _rendererOptions;

                    renderer.Render(JassSyntaxFactory.File(functions));
                }
            }
        }
    }
}